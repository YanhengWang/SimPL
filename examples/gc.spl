let f = fn x =>
		let sum = ref 0 in
		let i = ref 0 in
			while !i < x do
				i := !i + 1;
				sum := !sum + !i
		end; gc; !sum
		end
in
	let j = ref 0 in
		while !j < 10 do
			j := !j + 1;
			print (f !j)
	end
end

(*
let tmp = ref (ref 0) in
let i = ref 0 in
	(while !i<10 do
		i := !i + 1;
		tmp := ref (!i)
	)
end
end; gc

TRY TO PLAY AROUND WITH THE POSITION OF GC
*)

(*
let invoker = fn f => fn x => (gc; (f x); gc; (f x)) in
	invoker
	(let i = ref 0 in fn y => !i end)
	0
end
*)
